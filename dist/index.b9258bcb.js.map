{"mappings":"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","sources":["src/mvc/events.ts","src/mvc/model.ts","src/mvc/view.ts","src/mvc/controller.ts","src/index.ts"],"sourcesContent":["export interface NumberPressed {\n  type: \"number_pressed\";\n  value: number;\n}\n\nexport interface OperatorPressed {\n  type: \"operator_pressed\";\n  operator: Operator;\n}\n\nexport interface DecimalPressed {\n  type: \"decimal_pressed\";\n}\n\nexport interface ClearPressed {\n  type: \"clear_pressed\";\n}\n\nexport type CalculatorEvent =\n  | NumberPressed\n  | OperatorPressed\n  | DecimalPressed\n  | ClearPressed;\n\nexport enum Operator {\n  div,\n  mul,\n  sub,\n  add,\n  eq,\n  negate,\n  percent,\n}\n","import { CalculatorValue } from \"./calculator_value\";\nimport { Operator } from \"./events\";\nimport { View } from \"./view\";\n\nexport class Model {\n  view!: View;\n\n  private value?: string = \"0\";\n  private register?: string;\n  private shouldAppendDecimal = false;\n  private isDisplayingResult = false;\n  private continueOperation = false;\n  selectedOperation?: Operator;\n\n  get stringValue(): string {\n    const value = this.value ?? this.register!;\n\n    const parsed = parseFloat(value);\n\n    if (\n      parsed > 999999999 ||\n      parsed < -99999999 ||\n      (parsed !== 0 && Math.abs(parsed) < 0.000001)\n    ) {\n      return \"Err\";\n    }\n\n    return value;\n  }\n\n  appendDigit(digit: number) {\n    if (\n      (this.selectedOperation !== undefined && this.register === undefined) ||\n      this.isDisplayingResult\n    ) {\n      this.register = this.value;\n      this.value = undefined;\n      this.isDisplayingResult = false;\n    }\n\n    if (this.value === undefined) {\n      this.value = digit.toString();\n    } else if (this.value.length < 9 && this.value !== \"Err\") {\n      if (this.value === \"0\") {\n        this.value = digit.toString();\n      } else {\n        this.value += digit.toString();\n      }\n    }\n\n    this.view.modelDidUpdate(this);\n  }\n\n  appendDecimal() {\n    if (\n      (this.selectedOperation !== undefined && this.register === undefined) ||\n      this.isDisplayingResult\n    ) {\n      this.register = this.value;\n      this.value = \"0.\";\n      this.isDisplayingResult = false;\n    } else if (this.value === undefined) {\n      this.value = \"0.\";\n    } else if (!this.value.includes(\".\")) {\n      this.value += \".\";\n    }\n\n    this.view.modelDidUpdate(this);\n  }\n\n  didSelectOperator(op: Operator) {\n    switch (op) {\n      case Operator.div:\n      case Operator.mul:\n      case Operator.sub:\n      case Operator.add:\n        if (\n          this.register === undefined ||\n          this.selectedOperation !== op ||\n          this.continueOperation\n        ) {\n          this.selectOperation(op);\n        } else {\n          this.performBinaryOperation(op);\n        }\n        break;\n      case Operator.eq:\n        if (this.selectedOperation !== undefined) {\n          if (this.register === undefined) {\n            this.register = this.value;\n          } else if (this.value === undefined) {\n            this.value = this.register;\n          }\n\n          this.performBinaryOperation(this.selectedOperation);\n        }\n        this.isDisplayingResult = true;\n        break;\n      default:\n        if (this.value === undefined) {\n          this.value = this.register;\n        }\n        this.register = undefined;\n        this.performUnaryOperation(op);\n    }\n\n    this.view.modelDidUpdate(this);\n  }\n\n  clear() {\n    this.value = \"0\";\n    this.register = undefined;\n    this.selectedOperation = undefined;\n    this.shouldAppendDecimal = false;\n    this.view.modelDidUpdate(this);\n  }\n\n  private selectOperation(op: Operator) {\n    this.selectedOperation = op;\n    this.isDisplayingResult = true;\n    this.continueOperation = false;\n  }\n\n  private performBinaryOperation(op: Operator) {\n    let value = parseFloat(this.value!);\n    let register = parseFloat(this.register!);\n\n    switch (op) {\n      case Operator.div:\n        value = this.continueOperation ? value / register : register / value;\n        break;\n      case Operator.mul:\n        value = register * value;\n        break;\n      case Operator.sub:\n        value = this.continueOperation ? value - register : register - value;\n        break;\n      case Operator.add:\n        value = register + value;\n        break;\n    }\n\n    this.isDisplayingResult = true;\n\n    if (!this.continueOperation) {\n      this.register = this.value;\n      this.continueOperation = true;\n    }\n\n    this.value = this.valueToString(value);\n  }\n\n  private performUnaryOperation(op: Operator) {\n    let value = parseFloat(this.value!);\n\n    switch (op) {\n      case Operator.negate:\n        value = -value;\n        break;\n      case Operator.percent:\n        value = value / 100;\n        break;\n      default:\n        break;\n    }\n\n    this.value = this.valueToString(value);\n  }\n\n  private valueToString(value: number): string {\n    const precision = Math.abs(value) < 1 ? 8 : 9;\n\n    let stringVal = value.toPrecision(precision);\n\n    if (stringVal.includes(\".\")) {\n      stringVal = stringVal.replace(/\\.?0*$/, \"\");\n    }\n\n    return stringVal;\n  }\n}\n","import { Controller } from \"./controller\";\nimport { Operator } from \"./events\";\nimport { Model } from \"./model\";\n\nexport class View {\n  controller: Controller;\n\n  constructor(controller: Controller) {\n    this.controller = controller;\n\n    this.init();\n  }\n\n  private init() {\n    const buttons = document.querySelectorAll(\n      \".calc-button\"\n    ) as NodeListOf<HTMLInputElement>;\n\n    buttons.forEach((button) => {\n      button.onclick = (e) => this.handleButtonClicked(button);\n    });\n\n    document.body.onkeydown = (e) => this.handleKeyDown(e);\n    document.body.onkeyup = (e) => this.handleKeyUp(e);\n  }\n\n  private handleKeyDown(e: KeyboardEvent) {\n    if (document.activeElement instanceof HTMLElement) {\n      document.activeElement.blur();\n    }\n\n    const elem = this.elemForKey(e);\n\n    if (elem !== null) {\n      elem.classList.add(\"active\");\n      this.handleButtonClicked(elem as HTMLInputElement);\n    }\n  }\n\n  private handleKeyUp(e: KeyboardEvent) {\n    document.querySelectorAll(\".active\").forEach((elem) => {\n      elem.classList.remove(\"active\");\n    });\n  }\n\n  private elemForKey(e: KeyboardEvent): HTMLElement | null {\n    console.log(`${e.altKey ? \"Alt+\" : \"\"}${e.key}`);\n    switch (e.key) {\n      case \"Escape\":\n        return document.getElementById(\"clr\");\n      case \"-\":\n      case \"–\":\n        return e.altKey\n          ? document.getElementById(\"negate\")\n          : document.getElementById(\"sub\");\n      case \"%\":\n        return document.getElementById(\"percent\");\n      case \"/\":\n        return document.getElementById(\"div\");\n      case \"*\":\n        return document.getElementById(\"mul\");\n      case \"+\":\n        return document.getElementById(\"add\");\n      case \"=\":\n      case \"Enter\":\n        return document.getElementById(\"eq\");\n      default:\n        return document.getElementById(e.key);\n    }\n  }\n\n  private handleButtonClicked(button: HTMLInputElement) {\n    const type =\n      button.getAttribute(\"calc-button-type\") ??\n      button.parentElement?.getAttribute(\"calc-button-type\");\n\n    switch (type) {\n      case \"num\":\n        const value = parseInt(button.innerText);\n        this.controller.dispatch({ type: \"number_pressed\", value });\n        break;\n      case \"clr\":\n        this.controller.dispatch({ type: \"clear_pressed\" });\n        break;\n      case \"dec\":\n        this.controller.dispatch({ type: \"decimal_pressed\" });\n        break;\n      case \"op\":\n        const operatorText = button.id;\n        let operator = this.parseOperator(operatorText);\n        this.controller.dispatch({ type: \"operator_pressed\", operator });\n        break;\n    }\n  }\n\n  async modelDidUpdate(model: Model) {\n    const display = document.getElementById(\"display\")!;\n\n    display.innerText = \"\";\n\n    await new Promise<void>((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, 80);\n    });\n\n    const elem = document.querySelector(\".calc-button-selected\");\n    elem?.classList.remove(\"calc-button-selected\");\n\n    if (model.selectedOperation != null) {\n      switch (model.selectedOperation) {\n        case Operator.div:\n          document.getElementById(\"div\")?.classList.add(\"calc-button-selected\");\n          break;\n        case Operator.mul:\n          document.getElementById(\"mul\")?.classList.add(\"calc-button-selected\");\n          break;\n        case Operator.sub:\n          document.getElementById(\"sub\")?.classList.add(\"calc-button-selected\");\n          break;\n        case Operator.add:\n          document.getElementById(\"add\")?.classList.add(\"calc-button-selected\");\n          break;\n      }\n    }\n\n    display.innerText = model.stringValue;\n  }\n\n  private parseOperator(name: string): Operator {\n    switch (name) {\n      case \"negate\":\n        return Operator.negate;\n      case \"percent\":\n        return Operator.percent;\n      case \"div\":\n        return Operator.div;\n      case \"mul\":\n        return Operator.mul;\n      case \"sub\":\n        return Operator.sub;\n      case \"add\":\n        return Operator.add;\n      default:\n        return Operator.eq;\n    }\n  }\n}\n","import { CalculatorEvent } from \"./events\";\nimport { Model } from \"./model\";\nimport { View } from \"./view\";\n\nexport class Controller {\n  model: Model = new Model();\n  view: View = new View(this);\n\n  init() {\n    this.model.view = this.view;\n  }\n\n  dispatch(event: CalculatorEvent) {\n    switch (event.type) {\n      case \"number_pressed\":\n        this.model.appendDigit(event.value);\n        break;\n      case \"clear_pressed\":\n        this.model.clear();\n        break;\n      case \"decimal_pressed\":\n        this.model.appendDecimal();\n        break;\n      case \"operator_pressed\":\n        this.model.didSelectOperator(event.operator);\n        break;\n    }\n  }\n}\n","import { Controller } from \"./mvc/controller\";\n\nfunction main() {\n  const controller = new Controller();\n\n  controller.init();\n}\n\nmain();\n"],"names":["$0585ad933aff789f$export$fa5f90bfb4dbdbcd","Operator","$548f9a71261fe187$export$a1edc412be3e1841","value","shouldAppendDecimal","isDisplayingResult","continueOperation","stringValue","this","register","parsed","parseFloat","Math","abs","appendDigit","digit","undefined","selectedOperation","toString","length","view","modelDidUpdate","appendDecimal","includes","didSelectOperator","op","div","mul","sub","add","selectOperation","performBinaryOperation","eq","performUnaryOperation","clear","valueToString","negate","percent","precision","stringVal","toPrecision","replace","$032d2e465cd46219$export$27a5bd065ad55220","constructor","controller","init","document","querySelectorAll","forEach","button","onclick","e","handleButtonClicked","body","onkeydown","handleKeyDown","onkeyup","handleKeyUp","activeElement","HTMLElement","blur","elem","elemForKey","classList","remove","console","log","altKey","key","getElementById","getAttribute","parentElement","parseInt","innerText","dispatch","type","operatorText","id","operator","parseOperator","async","model","display","Promise","resolve","setTimeout","querySelector","name","$2e0b1a0a1380af8d$export$bd0bf19f25da8474","event"],"version":3,"file":"index.b9258bcb.js.map"}